{"meta":{"title":"Blog","subtitle":"博客","description":"个人博客","author":"Greendev","url":"https://dxx.fun"},"pages":[{"title":"About","date":"2018-11-02T08:27:02.487Z","updated":"2018-11-02T08:27:02.487Z","comments":true,"path":"about/index.html","permalink":"https://dxx.fun/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-11-02T08:27:02.487Z","updated":"2018-11-02T08:27:02.487Z","comments":true,"path":"categories/index.html","permalink":"https://dxx.fun/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-11-02T08:27:02.487Z","updated":"2018-11-02T08:27:02.487Z","comments":true,"path":"tags/index.html","permalink":"https://dxx.fun/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS选择器 匹配H标签","slug":"CSS选择器-匹配H标签","date":"2018-11-02T11:30:00.000Z","updated":"2018-11-02T11:31:25.983Z","comments":true,"path":"20181102/CSS选择器-匹配H标签/","link":"","permalink":"https://dxx.fun/20181102/CSS选择器-匹配H标签/","excerpt":"","text":"1$(&apos;.article :header&apos;) 匹配h1,h2之类的标题","categories":[{"name":"前端","slug":"前端","permalink":"https://dxx.fun/categories/前端/"}],"tags":[{"name":"css","slug":"css","permalink":"https://dxx.fun/tags/css/"}]},{"title":"ubuntu 16.04 配置Rime输入法（中州韵）","slug":"ubuntu-16-04-配置Rime输入法（中州韵）","date":"2018-11-02T11:30:00.000Z","updated":"2018-11-02T11:37:47.290Z","comments":true,"path":"20181102/ubuntu-16-04-配置Rime输入法（中州韵）/","link":"","permalink":"https://dxx.fun/20181102/ubuntu-16-04-配置Rime输入法（中州韵）/","excerpt":"","text":"安装 1sudo apt install fcitx-rime 添加输入法 我是直接在系统设置里添加 安装小鹤双拼 1sudo apt-get install librime-data-double-pinyin 修改输入法配置 1~/.config/rime/default.custom.yaml customization: distribution_code_name: Weasel distribution_version: 0.9.30 generator: &quot;Rime::SwitcherSettings&quot; modified_time: &quot;Mon Jul 21 11:07:43 2014&quot; rime_version: 1.1.2 patch: &quot;ascii_composer/good_old_caps_lock&quot;: true &quot;ascii_composer/switch_key&quot;: Caps_Lock: commit_code Control_L: commit_code Control_R: noop Shift_L: noop Shift_R: commit_code &quot;menu/page_size&quot;: 5 schema_list: - {schema: luna_pinyin} # 朙月拼音 #- {schema: cangjie5} # 倉頡五代 - {schema: luna_pinyin_fluency} #- {schema: luna_pinyin_simp} # 朙月拼音 简化字模式 #- {schema: luna_pinyin_tw} # 朙月拼音 臺灣正體模式 - {schema: double_pinyin_flypy} # 小鶴雙拼 &quot;switcher/hotkeys&quot;: - &quot;Control+grave&quot;","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://dxx.fun/categories/Ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://dxx.fun/tags/ubuntu/"},{"name":"Rime","slug":"Rime","permalink":"https://dxx.fun/tags/Rime/"},{"name":"输入法","slug":"输入法","permalink":"https://dxx.fun/tags/输入法/"}]},{"title":"Django2.0 配置静态文件路由，验证网站所有权","slug":"Django2-0-配置静态文件路由，验证网站所有权","date":"2018-11-02T11:29:00.000Z","updated":"2018-11-02T11:44:54.228Z","comments":true,"path":"20181102/Django2-0-配置静态文件路由，验证网站所有权/","link":"","permalink":"https://dxx.fun/20181102/Django2-0-配置静态文件路由，验证网站所有权/","excerpt":"","text":"Django2.0 配置静态文件路由这个有什么用？在 Google Analytics（分析）、百度统计 添加网站时需要验证网站所有权，这时一般有几种验证方式 如 Google： HTML 文件 - 上传将 HTML 文件上传到您的网站。 HTML 标记 - 向您网站的首页添加元标记。 域名提供商 - 登录到您的域名提供商网站。 Google 跟踪代码管理器 本文就是配置为了 1. HTML 文件， 为什么要用 HTML 文件 来验证？ HTML 标记 需要在网站首页添加&lt;meta&gt; 标签，强迫症，不想加 域名提供商 因为把裸域设成了CNAME，所有用不了这个（好像不应该设置裸域） Google 跟踪代码管理器 不知道为什么添加不了，以后再看 HTML文件 就剩你了 设置方法 导入静态视图 django.contrib.staticfiles.views.serve视图会在静态文件目录查找指定的path文件 也就是要把HTML文件存放在STATIC目录,或者指定document_root 设置urls.py1fromc 添加路由 使用django.urls.path 1234 path('googledadae4a424161111.html', serve, kwargs=&#123;'path':'googledadae4a424161111.html'&#125;, name='googleAnalytics'), 使用django.conf.urls.url django2.0 添加了re_path，url是re_path的别名，完全调用re_path 1234urlpatterns = [# .... 其他配置url(r'^googledadae4a424161111.html$', serve, name='googleAnalytics'),] 懒人专用配置 匹配所有html文件 1234urlpatterns = [# .... 其他配置url(r'^(?P&lt;path&gt;[a-zA-Z0-9]*\\.html)$', serve, name='html_file'),]","categories":[{"name":"Django","slug":"Django","permalink":"https://dxx.fun/categories/Django/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/tags/Python/"},{"name":"静态文件","slug":"静态文件","permalink":"https://dxx.fun/tags/静态文件/"},{"name":"DJango","slug":"DJango","permalink":"https://dxx.fun/tags/DJango/"}]},{"title":"ubuntu 16.04 python 3.x 安装OpenSSL","slug":"ubuntu-16-04-python-3-x-安装OpenSSL","date":"2018-11-02T11:29:00.000Z","updated":"2018-11-02T11:38:15.828Z","comments":true,"path":"20181102/ubuntu-16-04-python-3-x-安装OpenSSL/","link":"","permalink":"https://dxx.fun/20181102/ubuntu-16-04-python-3-x-安装OpenSSL/","excerpt":"","text":"错误提示：1Can&apos;t connect to HTTPS URL because the SSL module is not available. 连接HTTPS时，提示SSL不可用 测试12# 进入python$ python3 # or python3.6 12# 导入SSL模块&gt;&gt;&gt; import ssl 如果出现下面提示，则Python不支持SSL。 解决方案下载文件 OpenSSL $ wget http://www.openssl.org/source/openssl-1.0.2e.tar.gz Python3.6 - 选择需要的版本 $wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz 安装OpenSSL1234# 解压文件tar xvzf openssl-1.0.2e.tar.gz# 进入目录$ ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl 123$ make$ make test$ sudo make install Python进入目录123#解压$ tar xvzf Python-3.6.2.tgz$ cd Python-3.6.2 修改安装配置 使用VIM打开文件Modules/Setup.dist文件，搜索SSL，取消四行注释 1$ vim Modules/Setup.dist 开始安装 完成上面操作就可以安装了，执行下面3行代码 123$ ./configure$ make$ sudo make install 完成！ 不出意外已经安装完成，下面检测一下。 进入python 1$ python3 导入SSL模块 1&gt;&gt;&gt; import ssl 没有报错就已经成功了！","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://dxx.fun/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://dxx.fun/tags/Ubuntu/"},{"name":"python3","slug":"python3","permalink":"https://dxx.fun/tags/python3/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"https://dxx.fun/tags/OpenSSL/"}]},{"title":"Python 基础 - 数据类型 - 字符串类型与操作","slug":"Python-基础-数据类型-字符串类型与操作","date":"2018-11-02T11:28:00.000Z","updated":"2018-11-02T11:39:54.874Z","comments":true,"path":"20181102/Python-基础-数据类型-字符串类型与操作/","link":"","permalink":"https://dxx.fun/20181102/Python-基础-数据类型-字符串类型与操作/","excerpt":"","text":"#数据类型 字符串 str格式 单引号 双引号 三引号 多行. 利用其特点,可用于注释 1. 切片(同列表) 使用[M:N:K]根据步长对字符串切片M 缺失表示至开头N 缺失表示至结尾K 缺失表示步长1 正向递增序号 ‘hello world’[:5] == ‘hello’ 反向递减序号 ‘hello world’[-5:] == ‘world’ 步长 ‘1234567890’[::2] == ‘13579’ 步长为负, 反转字符串 ‘1234567890’[::-1] == ‘0987654321’ 2. 转义符 (在行尾时) 续行符 \\\\ 反斜杠符号 \\’ 单引号 \\” 双引号 \\b 退格(Backspace,光标向前退一格) \\000 空 \\n 换行(光标移动到下行首) \\r 回车(光标移动到本行首) \\t 横向制表符 \\a 响铃 \\e 转义 \\v 纵向制表符 \\f 换页 \\oyy 八进制数，yy代表的字符，例如：\\o12代表换行 \\xyy 十六进制数，yy代表的字符，例如：\\x0a代表换行 \\other 其它的字符以普通格式输出 3. 字符串操作符x + y- 连接两个字符串x和y n*x 或 x*n- 复制n次字符串x x in s- 如果x是s的子串, 返回True, 否则返回False 4. 字符串处理函数len(x)- 长度, 返回字符串x的长度 - len(&quot;一二三456&quot;) 结果为6 str(x)- 任意类型x所对应的字符串形式 - str(1.23) 结果为&quot;1.23&quot; - str([1, 2]) 结果为&quot;[1, 2]&quot; hex(x)- 整数x的十六进制小写形式字符串 - hex(425) 结果为&quot;0x1a9&quot; oct(x)- 整数x的八进制小写形式字符串 - oct(425) 结果为&quot;0o651&quot; chr(u)- u为Unicode编码, 返回其对应的字符 ord(x)- x为字符, 返回其对应的Unicode编码 str.lower()- 返回字符串的副本, 全部字符小写 - &apos;AbcDeF&apos;.upper() 结果为&quot;abcdef&quot; str.upper()- 返回字符串的副本, 全部字符大写 - &apos;AbcDeF&apos;.upper() 结果为&quot;ABCDEF&quot; str.split(sep=None)- 返回一个列表, 由str根据sep被分割的部分组成 - &quot;A,B,C&quot;.split(&quot;,&quot;) 结果为[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;] str.count(sub)- 返回子串sub在str中出现的次数 - &quot;a apple a day&quot;.count(&quot;a&quot;) 结果为4 str.replace(old, new)- 返回字符串str副本, 所有old子串被替换为new - &quot;python&quot;.replace(&quot;n&quot;, &quot;n123&quot;) 结果为&quot;python123&quot; str.center(width, fillchar=” “)- 字数串str根据宽度width居中, fillchar可选 - &quot;python&quot;.center(10,&apos;=&apos;) 结果为&apos;==python==&apos; str.strip(chars)- 从str中去掉在其左侧和右侧,chars中列出的字符 - &quot;== python ==&quot;.strip(&quot; =pn&quot;) 结果为&quot;ytho&quot; str.join(iter)- 主要用于字符串分割 - 在iter变量除最后元素外每个元素后增加一个str - &quot;,&quot;.join(&quot;12345&quot;) 结果为 &quot;1,2,3,4,5&quot; ### 5. 字符串格式化 “{0} / {1} / {2}”.format(2018, 10, 24) >> 2018 / 10 / 24 {序号} 为槽 槽的内部对格式化的配置方式{&lt;参数序号&gt;:&lt;格式控制标记&gt;}:&lt;填充&gt;|&lt;对齐&gt;|&lt;宽度&gt;|&lt;,&gt;|&lt;.精度&gt;|&lt;类型&gt; 填充 用于填充的单个字符 对齐 &lt; 左对齐 > 右对齐 ^ 居中对齐 宽度 槽设定的输出宽度 ,(逗号) 数字的千位分隔符 .精度 浮点数小数精度 或 字数串最大输出长度 类型 整数类型 b c d o x X 浮点数类型 e E f % 示例123\"&#123;0:=^50,.3f&#125;\".format(500000.12345)'===================500,000.123====================' 0 序号 = 填充 ^ 居中对齐 50 宽度50 , 千位分割 .3 保留3为小数 f 浮点类型 EndAD https://zfdev.com https://dxx.fun","categories":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/tags/Python/"},{"name":"字符串","slug":"字符串","permalink":"https://dxx.fun/tags/字符串/"},{"name":"String","slug":"String","permalink":"https://dxx.fun/tags/String/"}]},{"title":"ubuntu安装node vue","slug":"ubuntu安装node-vue","date":"2018-11-02T11:28:00.000Z","updated":"2018-11-02T11:38:32.773Z","comments":true,"path":"20181102/ubuntu安装node-vue/","link":"","permalink":"https://dxx.fun/20181102/ubuntu安装node-vue/","excerpt":"","text":"Nodejs 下载 1https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz 解压 1# 安装(移动) 12$sudo mkdir /usr/local/node/$sudo mv node-v8.11.1-linux-x64 /usr/local/node/v8.11.1 软链接 12$sudo ln -s /usr/local/node/v8.11.1/bin/node /usr/local/bin/node$sudo ln -s /usr/local/node/v8.11.1/bin/npm /usr/local/bin/npm 安装cnpm 12$sudo npm install -g cnpm --registry=https://registry.npm.taobao.org$sudo ln -s /usr/local/node/v8.11.1/bin/cnpm /usr/local/bin/cnpm 添加环境变量 1vim ~/.bashrc .bashrc 123export NODE_HOME=/usr/local/node/v8.11.1/export PATH=$PATH:$NODE_HOME/bin export NODE_PATH=$NODE_HOME/lib/node_modules 执行 1source ~/.bashrc VUE 安装1sudo cnpm install --global vue-cli","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://dxx.fun/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://dxx.fun/tags/Ubuntu/"},{"name":"Node","slug":"Node","permalink":"https://dxx.fun/tags/Node/"},{"name":"Vue","slug":"Vue","permalink":"https://dxx.fun/tags/Vue/"}]},{"title":"Django 2.0 静态文件404解决方法","slug":"Django-2-0-静态文件404解决方法","date":"2018-11-02T11:27:00.000Z","updated":"2018-11-02T11:45:57.244Z","comments":true,"path":"20181102/Django-2-0-静态文件404解决方法/","link":"","permalink":"https://dxx.fun/20181102/Django-2-0-静态文件404解决方法/","excerpt":"","text":"Django 在 Debug=True 时, 不需要配置. Django会在App中需找STATIC路径.因为服务器一直用Nginx配置STATIC路径, 所以一直没有配置开发环境的STATIC路径,但需要测试生产环境还是不方便, 所以设置一下Django中的STATIC路由. 配置project/urls.pyfrom django.views.static import serve urlpatterns = [ url(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, serve, {&apos;document_root&apos;: settings.STATIC_ROOT}, name=&apos;static&apos;), ... ] project/settings.pyINSTALLED_APPS = [ &apos;django.contrib.staticfiles&apos;, ...... ] STATIC_URL = &apos;/static/&apos; STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;) STATICFILES_DIRS = ( os.path.join(BASE_DIR, &apos;apps/appname/static/&apos;), ) 路径STATIC project/static/… http://127.0.0.1:8000/static/... APP_STATIC project/.?/appname/STATIC http://127.0.0.1:8000/static/... 部署时使用需收集App下的STATIC文件到project/static/, 命令 python manage.py collectstatic EndAD https://dxx.fun/c/Python.htmlhttps://zfdev.com","categories":[{"name":"Django","slug":"Django","permalink":"https://dxx.fun/categories/Django/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/tags/Python/"},{"name":"Django","slug":"Django","permalink":"https://dxx.fun/tags/Django/"},{"name":"静态文件","slug":"静态文件","permalink":"https://dxx.fun/tags/静态文件/"}]},{"title":"python虚拟环境 Virtualenv及Virtualenvwrapper","slug":"python虚拟环境-Virtualenv及Virtualenvwrapper","date":"2018-11-02T11:27:00.000Z","updated":"2018-11-02T11:39:26.676Z","comments":true,"path":"20181102/python虚拟环境-Virtualenv及Virtualenvwrapper/","link":"","permalink":"https://dxx.fun/20181102/python虚拟环境-Virtualenv及Virtualenvwrapper/","excerpt":"","text":"虚拟环境虚拟环境原理介绍： 虚拟环境相当于一个抽屉，在这个抽屉中安装的任何软件包都不会影响到其他抽屉。并且在项目中，我可以指定这个项目的虚拟环境来配合我的项目。比如我们现在有一个项目是基于Django 1.10.x版本，又有一个项目是基于Django 0.9.x的版本，那么这时候就可以创建两个虚拟环境，在这两个虚拟环境中分别安装Django 1.10.x和Django 0.9.x来适配我们的项目。 virtualenv安装virtualenv：virtualenv是用来创建虚拟环境的软件工具，我们可以通过pip或者pip3来安装： pip install virtualenv pip3 install virtualenv 创建虚拟环境：创建虚拟环境非常简单，通过以下命令就可以创建了： virtualenv [虚拟环境的名字] 如果你当前的Python3/Scripts的查找路径在Python2/Scripts的前面，那么将会使用python3作为这个虚拟环境的解释器。如果python2/Scripts在python3/Scripts前面，那么将会使用Python2来作为这个虚拟环境的解释器。 进入环境：虚拟环境创建好了以后，那么可以进入到这个虚拟环境中，然后安装一些第三方包，进入虚拟环境在不同的操作系统中有不同的方式，一般分为两种，第一种是Windows，第二种是*nix： windows进入虚拟环境：进入到虚拟环境的Scripts文件夹中，然后执行activate。 *nix进入虚拟环境：source /path/to/virtualenv/bin/activate 一旦你进入到了这个虚拟环境中，你安装包，卸载包都是在这个虚拟环境中，不会影响到外面的环境。 退出虚拟环境：退出虚拟环境很简单，通过一个命令就可以完成： deactivate 创建虚拟环境的时候指定Python解释器：在电脑的环境变量中，一般是不会去更改一些环境变量的顺序的。也就是说比如你的Python2/Scripts在Python3/Scripts的前面，那么你不会经常去更改他们的位置。但是这时候我确实是想在创建虚拟环境的时候用Python3这个版本，这时候可以通过-p参数来指定具体的Python解释器： virtualenv -p C:\\Python36\\python.exe [virutalenv name] virtualenvwrapper： virtualenvwrapper这个软件包可以让我们管理虚拟环境变得更加简单。不用再跑到某个目录下通过virtualenv来创建虚拟环境，并且激活的时候也要跑到具体的目录下去激活。 安装virtualenvwrapper：*nix：pip install virtualenvwrapper windowspip install virtualenvwrapper-win virtualenvwrapper基本使用：创建虚拟环境：mkvirtualenv my_env 那么会在你当前用户下创建一个Env的文件夹，然后将这个虚拟环境安装到这个目录下。如果你电脑中安装了python2和python3，并且两个版本中都安装了virtualenvwrapper，那么将会使用环境变量中第一个出现的Python版本来作为这个虚拟环境的Python解释器。 切换到某个虚拟环境：workon my_env 退出当前虚拟环境：deactivate 删除某个虚拟环境：rmvirtualenv my_env 列出所有虚拟环境：lsvirtualenv 进入到虚拟环境所在的目录：cd virtualenv 修改mkvirtualenv的默认路径：在我的电脑-&gt;右键-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量中添加一个参数WORKON_HOME，将这个参数的值设置为你需要的路径。 创建虚拟环境的时候指定Python版本：在使用mkvirtualenv的时候，可以指定–python的参数来指定具体的python路径： mkvirtualenv --python==C:\\Python36\\python.exe hy_env virtualenvwrapper 命令的完全列表 参考：http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html EndAD","categories":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://dxx.fun/tags/Python/"},{"name":"Virtualenv","slug":"Virtualenv","permalink":"https://dxx.fun/tags/Virtualenv/"},{"name":"Virtualenvwrapper","slug":"Virtualenvwrapper","permalink":"https://dxx.fun/tags/Virtualenvwrapper/"}]},{"title":"pm2","slug":"pm2","date":"2018-11-02T11:16:00.000Z","updated":"2018-11-02T11:34:28.122Z","comments":true,"path":"20181102/pm2/","link":"","permalink":"https://dxx.fun/20181102/pm2/","excerpt":"","text":"run.js12345678910//runconst &#123; exec &#125; = require(&apos;child_process&apos;)exec(&apos;hexo server -i 0.0.0.0 -p 8020 -d&apos;,(error, stdout, stderr) =&gt; &#123; if(error)&#123; console.log(&apos;exec error: $&#123;error&#125;&apos;) return &#125; console.log(&apos;stdout: $&#123;stdout&#125;&apos;); console.log(&apos;stderr: $&#123;stderr&#125;&apos;);&#125;) source","categories":[{"name":"前端","slug":"前端","permalink":"https://dxx.fun/categories/前端/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://dxx.fun/tags/Node/"},{"name":"Hexo","slug":"Hexo","permalink":"https://dxx.fun/tags/Hexo/"},{"name":"pm2","slug":"pm2","permalink":"https://dxx.fun/tags/pm2/"}]},{"title":"hexo-admin deploy","slug":"hexo-admin-deploy","date":"2018-11-02T11:09:00.000Z","updated":"2018-11-02T11:34:49.955Z","comments":true,"path":"20181102/hexo-admin-deploy/","link":"","permalink":"https://dxx.fun/20181102/hexo-admin-deploy/","excerpt":"","text":"1. _config.yml12admin: deployCommand: &apos;sh hexo-deploy.sh&apos; 2. hexo-deploy.sh1hexo g -d 3. blog\\node_modules\\hexo-admin\\deploy.js old 1var proc = spawn(command, [message], &#123;detached: true&#125;); new 1var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]);","categories":[{"name":"前端","slug":"前端","permalink":"https://dxx.fun/categories/前端/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://dxx.fun/tags/Hexo/"},{"name":"deploy","slug":"deploy","permalink":"https://dxx.fun/tags/deploy/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-02T08:27:02.487Z","updated":"2018-11-02T08:27:02.487Z","comments":true,"path":"20181102/hello-world/","link":"","permalink":"https://dxx.fun/20181102/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}